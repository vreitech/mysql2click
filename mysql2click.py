import asyncio
import aiomysql
import asynch
import logging

"""
–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –≤ ClickHouse:

CREATE TABLE `dc_log_old`
(
    `id` UInt64,
    `log_key` UInt32,
    `log_type` Int32,
    `log_data` String CODEC(ZSTD(16)),
    `log_time` DateTime
)
ENGINE = ReplacingMergeTree
PARTITION BY toYYYYMM(log_time)
PRIMARY KEY id
ORDER BY (id, log_time);
"""

log_file_name = "./mysql2click.log"
mysql_host = "127.0.0.1"
mysql_port = 3306
mysql_user = "root"
mysql_password = "<MYSQL_PASSWORD_HERE>"
mysql_db = "dc_bitrix"
clickhouse_host = "127.0.0.1"
clickhouse_port = 9000
clickhouse_user = "root"
clickhouse_password = "<CLICKHOUSE_PASSWORD_HERE>"
clickhouse_db = "default"

mysql_table = 'dc_log' # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ë–î
clickhouse_table = 'dc_log_old' # –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ —Ü–µ–ª–µ–≤–æ–π –ë–î
position_start = 27756000000
position_end =   27756100000
batch_rows = 10000 # –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ —Å—Ç—Ä–æ–∫ - –µ–¥–∏–Ω–∏—Ü—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–∑ –æ–¥–Ω–æ–π –ë–î –≤ –¥—Ä—É–≥—É—é –≤ –¥–∞–Ω–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ.
make_mysql_deletes = False # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞. `mysql_host` –∏ `mysql_port` –¥–æ–ª–∂–Ω—ã —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –º–∞—Å—Ç–µ—Ä!
sleep_interval = 2 # –ù–∞ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∑–∞—Å—ã–ø–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∫–∞–∂–¥–æ–π –ø–∞—á–∫–∏ —Å—Ç—Ä–æ–∫. –£–≤–µ–ª–∏—á—å—Ç–µ, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞, –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ `make_mysql_deletes`



async def loop_mysql(loop):
    logger.info('–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω')
    logger.info(f'üîß –ë–î –∏—Å—Ç–æ—á–Ω–∏–∫            : mysql://{mysql_host}:{mysql_port}/{mysql_db}/{mysql_table}')
    logger.info(f'üîß –ë–î –ø—Ä–∏—ë–º–Ω–∏–∫            : clickhouse://{clickhouse_host}:{clickhouse_port}/{clickhouse_db}/{clickhouse_table}')
    logger.info(f'üîß –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ —Å—Ç—Ä–æ–∫     : {batch_rows}')
    logger.info(f'üîß –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è id   : {position_start}')
    logger.info(f'üîß –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è id    : {position_end}')
    logger.info(f'üîß –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ : {sleep_interval}')
    position_current = position_start
    logger.info('‚ùï –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ MySQL...')
    try:
        pool_mysql = await aiomysql.create_pool(
            host = mysql_host,
            port = mysql_port,
            user = mysql_user,
            password = mysql_password,
            db = mysql_db
        )
    except:
        logger.info('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É MySQL!');
        raise
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!')

    logger.info('‚ùï –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ ClickHouse...')
    try:
        pool_clickhouse = await asynch.create_pool(
            host = clickhouse_host,
            port = clickhouse_port,
            user = clickhouse_user,
            password = clickhouse_password,
            database = clickhouse_db
        )
    except:
        logger.info('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É ClickHouse!');
        raise
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!')

    async with pool_mysql.acquire() as conn_mysql:
        async with conn_mysql.cursor() as cur_mysql:
            while True:
                await cur_mysql.execute("""
                    SELECT `id`, `log_key`, `log_type`, `log_data`, `log_time` FROM `%s` WHERE `id` > %%s and `id` <= %%s ORDER BY `id` LIMIT %%s
                """ % (mysql_table), (position_current, position_end, batch_rows,))
                row = await cur_mysql.fetchall()
                if len(row) == 0:
                    break
                position_current = await insert_clickhouse(pool_clickhouse, row)
                await asyncio.sleep(sleep_interval)

    logger.info('‚ùï –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ MySQL...')
    pool_mysql.close()
    await pool_mysql.wait_closed()
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!')

    await asyncio.sleep(sleep_interval)
    logger.info('‚ùï –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...')
    async with pool_clickhouse.acquire() as conn_clickhouse:
        async with conn_clickhouse.cursor(cursor=asynch.cursors.DictCursor) as cursor_clickhouse:
            ret_clickhouse = await cursor_clickhouse.execute("""
                OPTIMIZE TABLE `%s`
            """ % (clickhouse_table))
            
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!');

    logger.info('‚ùï –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ ClickHouse...')
    pool_clickhouse.close()
    await pool_clickhouse.wait_closed()
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!');
    
    logger.info('–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω')



async def insert_clickhouse(pool_clickhouse, row):
    async with pool_clickhouse.acquire() as conn_clickhouse:
        async with conn_clickhouse.cursor(cursor=asynch.cursors.DictCursor) as cursor_clickhouse:
            rows_number = len(row)
            position_current = row[rows_number - 1][0];
            ret_clickhouse = await cursor_clickhouse.execute("""
                INSERT INTO `%s` (`id`, `log_key`, `log_type`, `log_data`, `log_time`) VALUES
            """ % (clickhouse_table), row
            )
            assert ret_clickhouse == rows_number, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ ClickHouse: –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Å—Ç—Ä–æ–∫ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ.\n–ü–æ–ª—É—á–µ–Ω–æ {rows_number} —Å—Ç—Ä–æ–∫ –∏–∑ MySQL, –Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {ret_clickhouse} —Å—Ç—Ä–æ–∫ –≤ ClickHouse.'
            logger.info(f'‚è≥ –°—Ç—Ä–æ–∫ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ    : {rows_number}')
            logger.info(f'‚è≥ –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è id : {position_current}')
            logger.info('‚è≥ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è : {:.2f}%'.format((position_current - position_start) / (position_end - position_start) * 100))
            return position_current



logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
conhandler = logging.StreamHandler()
conhandler.setLevel(logging.INFO)
filehandler = logging.FileHandler(log_file_name, mode='a')
filehandler.setLevel(logging.INFO)
formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s', '%Y-%m-%d %H:%M:%S')
conhandler.setFormatter(formatter)
filehandler.setFormatter(formatter)
logger.addHandler(conhandler)
logger.addHandler(filehandler)

loop = asyncio.get_event_loop()
loop.run_until_complete(loop_mysql(loop))
