import sys
import signal
import time
import logging
import argparse
import configparser
import asyncio
import aiomysql
import asynch

"""
–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü –≤ ClickHouse:

CREATE TABLE dc_log_old
(
    `id` UInt64,
    `log_time` DateTime,
    `log_key` UInt32,
    `log_type` Int32,
    `log_data` String CODEC(ZSTD(14))
)
ENGINE = ReplacingMergeTree
PARTITION BY toYYYYMM(log_time)
ORDER BY (log_type, log_key, id, log_time);

CREATE MATERIALIZED VIEW dc_log_old_max_id
(
    `log_date` Date CODEC(Delta, ZSTD(14)),
    `max_id` SimpleAggregateFunction(max, UInt64) CODEC(Delta, ZSTD(14))
)
ENGINE = AggregatingMergeTree
ORDER BY log_date
SETTINGS index_granularity = 8192 AS
SELECT
    DATE(log_time) AS log_date,
    max(id) AS max_id
FROM dc_log_old
GROUP BY log_date;

CREATE TABLE b_event_log_old
(
    `id` UInt64 CODEC(Delta, ZSTD(14)),
    `timestamp_x` DateTime CODEC(Delta, ZSTD(14)),
    `severity` LowCardinality(String) CODEC(ZSTD(14)),
    `audit_type_id` LowCardinality(String) CODEC(ZSTD(14)),
    `module_id` LowCardinality(String) CODEC(ZSTD(14)),
    `item_id` String CODEC(ZSTD(14)),
    `remote_addr` Nullable(String) CODEC(ZSTD(14)),
    `user_agent` Nullable(String) CODEC(ZSTD(14)),
    `request_uri` Nullable(String) CODEC(ZSTD(14)),
    `site_id` Nullable(FixedString(2)) CODEC(ZSTD(14)),
    `user_id` Nullable(UInt64) CODEC(ZSTD(14)),
    `guest_id` Nullable(UInt64) CODEC(ZSTD(14)),
    `description` Nullable(String) CODEC(ZSTD(14))
)
ENGINE = ReplacingMergeTree
PARTITION BY toYYYYMM(timestamp_x)
ORDER BY (severity, audit_type_id, id, timestamp_x);

CREATE MATERIALIZED VIEW b_event_log_old_max_id
(
    `log_date` Date CODEC(Delta, ZSTD(14)),
    `max_id` SimpleAggregateFunction(max, UInt64) CODEC(Delta, ZSTD(14))
)
ENGINE = AggregatingMergeTree
ORDER BY log_date
SETTINGS index_granularity = 8192 AS
SELECT
    DATE(timestamp_x) AS log_date,
    max(id) AS max_id
FROM b_event_log_old
GROUP BY log_date;
"""



conf_full = configparser.ConfigParser()
conf_full.read('config.ini')
section = "DEFAULT"
args_parser = argparse.ArgumentParser(
    prog="mysql2click",
    description="Transferring data from a MySQL table to ClickHouse in chunks, operating the transfer range")
args_parser.add_argument('-s', '--section', dest='section')
args = args_parser.parse_args()
if (args.section is not None):
    section = args.section
conf = conf_full[section]

signal.signal(signal.SIGINT, self.sigIntTermHandler)
signal.signal(signal.SIGTERM, self.sigIntTermHandler)

async def loop_mysql(loop):
    logger.info('–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω')
    logger.info(f'üîß –ë–î –∏—Å—Ç–æ—á–Ω–∏–∫ (—á—Ç–µ–Ω–∏–µ)    : mysql://{conf["mysql_host_read"]}:{conf["mysql_port_read"]}/{conf["mysql_db"]}/{conf["mysql_table"]}')
    if conf.getboolean("make_mysql_delete"):
        logger.info(f'üîß –ë–î –∏—Å—Ç–æ—á–Ω–∏–∫ (—É–¥–∞–ª–µ–Ω–∏–µ)  : mysql://{conf["mysql_host_delete"]}:{conf["mysql_port_delete"]}/{conf["mysql_db"]}/{conf["mysql_table"]}')
    logger.info(f'üîß –ë–î –ø—Ä–∏—ë–º–Ω–∏–∫             : clickhouse://{conf["clickhouse_host"]}:{conf["clickhouse_port"]}/{conf["clickhouse_db"]}/{conf["clickhouse_table"]}')
    logger.info(f'üîß –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è id    : {conf["position_start"]}')
    logger.info(f'üîß –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è id     : {conf["position_end"]}')
    logger.info(f'üîß –†–∞–∑–º–µ—Ä –ø–∞—á–∫–∏ —Å—Ç—Ä–æ–∫      : {conf["batch_rows"]}')
    logger.info(f'üîß –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞—á–∫–∞–º–∏ (—Å) : {conf["sleep_interval"]}')
    logger.warning('–ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å –Ω–∞ –æ—Ç–º–µ–Ω—É)...')
    await asyncio.sleep(10)

    position_current = conf.getint("position_start")

    logger.info('‚ùï –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ MySQL –¥–ª—è —á—Ç–µ–Ω–∏—è...')
    try:
        pool_mysql_read = await aiomysql.create_pool(
            host = conf["mysql_host_read"],
            port = conf.getint("mysql_port_read"),
            user = conf["mysql_user_read"],
            password = conf["mysql_password_read"],
            db = conf["mysql_db"],
            minsize = 5,
            maxsize = 15,
            autocommit = True,
            echo = True
        )
    except:
        logger.error('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É MySQL!');
        logger.exception(sys.exc_info()[0])
        sys.exit(8)
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!')

    if conf.getboolean("make_mysql_delete"):
        logger.info('‚ùï –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ MySQL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...')
        try:
            pool_mysql_delete = await aiomysql.create_pool(
                host = conf["mysql_host_delete"],
                port = conf.getint("mysql_port_delete"),
                user = conf["mysql_user_delete"],
                password = conf["mysql_password_delete"],
                db = conf["mysql_db"],
                minsize = 5,
                maxsize = 15,
                autocommit = True,
                echo = True
            )
        except:
            logger.error('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É MySQL!');
            logger.exception(sys.exc_info()[0])
            sys.exit(8)
        logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!')

    logger.info('‚ùï –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ ClickHouse...')
    try:
        pool_clickhouse = await asynch.create_pool(
            host = conf["clickhouse_host"],
            port = conf.getint("clickhouse_port"),
            user = conf["clickhouse_user"],
            password = conf["clickhouse_password"],
            database = conf["clickhouse_db"]
        )
    except:
        logger.error('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É ClickHouse!');
        logger.exception(sys.exc_info()[0])
        sys.exit(9)
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!')

    async with pool_mysql_read.acquire() as conn_mysql_read:
        async with conn_mysql_read.cursor() as cur_mysql_read:
            while True:
                logger.info('‚è≥ –ß—Ç–µ–Ω–∏–µ –∏–∑ MySQL...')
                try:
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–º –æ–Ω–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
                    position_current_at_read = position_current
                    
                    await cur_mysql_read.execute(conf["mysql_read_query"] % (conf["mysql_table"]), (position_current, conf.getint("position_end"), conf.getint("batch_rows"),))
                except:
                    logger.error('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏–∑ MySQL!')
                    logger.exception(sys.exc_info()[0])
                    sys.exit(16)
                row = await cur_mysql_read.fetchall()
                if len(row) == 0:
                    logger.info('–ù–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –≤ MySQL –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
                    break
                logger.info('‚è≥ –í—Å—Ç–∞–≤–∫–∞ –≤ ClickHouse...')
                position_current = await insert_clickhouse(pool_clickhouse, row)
                if conf.getboolean("make_mysql_delete"):
                    logger.info('‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –≤ MySQL...')
                    conn_mysql_delete = await pool_mysql_delete.acquire()
                    cur_mysql_delete = await conn_mysql_delete.cursor()
                    try:
                        await cur_mysql_delete.execute(conf["mysql_delete_query"] % (conf["mysql_table"]), (position_current_at_read, position_current,))
                        row_delete = await cur_mysql_delete.fetchall()
                    except aiomysql.OperationalError as e:
                        logger.error('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤ MySQL!')
                        if e.args[0] == 1205:
                            logger.warning(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å id –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ —Å {position_current_at_read} –ø–æ {position_current} –∏–∑ MySQL –Ω–∞ —Ö–æ—Å—Ç–µ "{conf["mysql_host_delete"]}".')
                            logger.warning('–†–∞–±–æ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∞, –æ–¥–Ω–∞–∫–æ —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ MySQL –Ω–µ—Ç –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã—Ö XA-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö —É–¥–∞–ª–µ–Ω–∏–µ.')
                            logger.warning(f'–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤ –∫–ª–∏–µ–Ω—Ç–µ MySQL –∫–æ–º–∞–Ω–¥–æ–π "XA RECOVER;" –Ω–∞ —Ö–æ—Å—Ç–µ "{conf["mysql_host_delete"]}".')
                            logger.warning('–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–µ—Ä–Ω—ë—Ç –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π - –¥–æ–≤–æ–ª—å–Ω–æ –≤–µ–ª–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ MySQL –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞')
                            logger.warning('–∫–∞–∫ –º–∏–Ω–∏–º—É–º –ø–æ –æ–¥–Ω–æ–º—É id –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.')
                            logger.warning('–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –∏–º–µ–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.')
                            logger.warning('–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–∏–∂–µ.')
                            logger.exception(sys.exc_info()[0])
                        else:
                            logger.exception(sys.exc_info()[0])
                            sys.exit(17)
                    await cur_mysql_delete.close()
                    await pool_mysql_delete.release(conn_mysql_delete)
                await asyncio.sleep(conf.getint("sleep_interval"))

    logger.info('‚ùï –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ MySQL –¥–ª—è —á—Ç–µ–Ω–∏—è...')
    pool_mysql_read.close()
    await pool_mysql_read.wait_closed()
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!')

    if conf.getboolean("make_mysql_delete"):
        logger.info('‚ùï –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ MySQL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...')
        pool_mysql_delete.close()
        await pool_mysql_delete.wait_closed()
        logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!')

    if conf.getboolean("make_clickhouse_optimize"):
        logger.info('‚ùï –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ª–µ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã...')
        await asyncio.sleep(conf.getint("sleep_interval"))
        await optimize_clickhouse(pool_clickhouse)            
        logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!');

    logger.info('‚ùï –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –∫–æ–Ω–Ω–µ–∫—Ç–æ–≤ ClickHouse...')
    pool_clickhouse.close()
    await pool_clickhouse.wait_closed()
    logger.info('‚úÖ –£—Å–ø–µ—à–Ω–æ!');
    
    logger.info('–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω')



async def insert_clickhouse(pool_clickhouse, row):
    async with pool_clickhouse.acquire() as conn_clickhouse:
        async with conn_clickhouse.cursor(cursor=asynch.cursors.DictCursor) as cursor_clickhouse:
            rows_number = len(row)
            position_current = row[rows_number - 1][0];
            try:
                ret_clickhouse = await cursor_clickhouse.execute(conf["clickhouse_insert_query"] % (conf["clickhouse_table"]), row)
            except:
                logger.error('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç–∞–≤–∫—É –≤ ClickHouse!')
                logger.exception(sys.exc_info()[0])
                sys.exit(18)
            assert ret_clickhouse == rows_number, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ ClickHouse: –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞ —Å—Ç—Ä–æ–∫ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ.\n–ü–æ–ª—É—á–µ–Ω–æ {rows_number} —Å—Ç—Ä–æ–∫ –∏–∑ MySQL, –Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ {ret_clickhouse} —Å—Ç—Ä–æ–∫ –≤ ClickHouse.'
            logger.info(f'‚è≥ –°—Ç—Ä–æ–∫ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ    : {rows_number}')
            logger.info(f'‚è≥ –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è id : {position_current}')
            logger.info('‚è≥ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è : {:.2f}%'.format((position_current - conf.getint("position_start")) / (conf.getint("position_end") - conf.getint("position_start")) * 100))
            return position_current



async def optimize_clickhouse(pool_clickhouse):
    async with pool_clickhouse.acquire() as conn_clickhouse:
        async with conn_clickhouse.cursor(cursor=asynch.cursors.DictCursor) as cursor_clickhouse:
            try:
                ret_clickhouse = await cursor_clickhouse.execute(conf["clickhouse_optimize_query"] % (conf["clickhouse_table"]))
            except:
                logger.error('üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤ ClickHouse!')
                logger.exception(sys.exc_info()[0])
                sys.exit(19)



logger = logging.getLogger('aiomysql')
logger.setLevel(logging.INFO)
conhandler = logging.StreamHandler()
conhandler.setLevel(logging.INFO)
filehandler = logging.FileHandler(conf["log_file_name"], mode='a')
filehandler.setLevel(logging.INFO)
formatter = logging.Formatter('[%(asctime)s] [%(levelname)s] %(message)s', '%Y-%m-%d %H:%M:%S')
conhandler.setFormatter(formatter)
filehandler.setFormatter(formatter)
logger.addHandler(conhandler)
logger.addHandler(filehandler)

loop = asyncio.get_event_loop()
loop.run_until_complete(loop_mysql(loop))

